/* tslint:disable */
/* eslint-disable */
/**
 * SSG Election
 * The SSG Election API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenDto
 */
export interface AccessTokenDto {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface AdminDto
 */
export interface AdminDto {
    /**
     * 
     * @type {string}
     * @memberof AdminDto
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof AdminDto
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof AdminDto
     */
    'position': string;
}
/**
 * 
 * @export
 * @interface CandidateDto
 */
export interface CandidateDto {
    /**
     * 
     * @type {string}
     * @memberof CandidateDto
     */
    'position_type': string;
    /**
     * 
     * @type {number}
     * @memberof CandidateDto
     */
    'election_id': number;
    /**
     * 
     * @type {number}
     * @memberof CandidateDto
     */
    'studentAcademicYr_id': number;
    /**
     * 
     * @type {string}
     * @memberof CandidateDto
     */
    'quote': string;
}
/**
 * 
 * @export
 * @interface ElectionDto
 */
export interface ElectionDto {
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'election_name': string;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'start_time': string;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'end_date': string;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'end_time': string;
}
/**
 * 
 * @export
 * @interface MediaDto
 */
export interface MediaDto {
    /**
     * 
     * @type {string}
     * @memberof MediaDto
     */
    'mimeType': string;
    /**
     * 
     * @type {string}
     * @memberof MediaDto
     */
    'filename'?: string;
}
/**
 * 
 * @export
 * @interface PrimeMinisterDto
 */
export interface PrimeMinisterDto {
    /**
     * 
     * @type {number}
     * @memberof PrimeMinisterDto
     */
    'election_id': number;
}
/**
 * 
 * @export
 * @interface RefreshDto
 */
export interface RefreshDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshDto
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface RepresentativeDto
 */
export interface RepresentativeDto {
    /**
     * 
     * @type {number}
     * @memberof RepresentativeDto
     */
    'voter_id': number;
}
/**
 * 
 * @export
 * @interface StudentAcademicYrDto
 */
export interface StudentAcademicYrDto {
    /**
     * 
     * @type {string}
     * @memberof StudentAcademicYrDto
     */
    'college': string;
    /**
     * 
     * @type {string}
     * @memberof StudentAcademicYrDto
     */
    'department': string;
    /**
     * 
     * @type {string}
     * @memberof StudentAcademicYrDto
     */
    'course': string;
    /**
     * 
     * @type {number}
     * @memberof StudentAcademicYrDto
     */
    'year_admitted': number;
    /**
     * 
     * @type {number}
     * @memberof StudentAcademicYrDto
     */
    'academic_year': number;
    /**
     * 
     * @type {number}
     * @memberof StudentAcademicYrDto
     */
    'current_yr_level': number;
}
/**
 * 
 * @export
 * @interface StudentDto
 */
export interface StudentDto {
    /**
     * 
     * @type {number}
     * @memberof StudentDto
     */
    'account_id': number;
    /**
     * 
     * @type {number}
     * @memberof StudentDto
     */
    'school_id': number;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'middle_name': string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'suffix'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface TempTallyDto
 */
export interface TempTallyDto {
    /**
     * 
     * @type {number}
     * @memberof TempTallyDto
     */
    'candidate_id': number;
    /**
     * 
     * @type {number}
     * @memberof TempTallyDto
     */
    'election_id': number;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'userType': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface VoterDto
 */
export interface VoterDto {
    /**
     * 
     * @type {number}
     * @memberof VoterDto
     */
    'candidate_id': number;
    /**
     * 
     * @type {number}
     * @memberof VoterDto
     */
    'election_id': number;
    /**
     * 
     * @type {string}
     * @memberof VoterDto
     */
    'date': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new Admin
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdmin: async (adminDto: AdminDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminDto' is not null or undefined
            assertParamExists('addAdmin', 'adminDto', adminDto)
            const localVarPath = `/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Candidate
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCandidate: async (candidateDto: CandidateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateDto' is not null or undefined
            assertParamExists('addCandidate', 'candidateDto', candidateDto)
            const localVarPath = `/candidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(candidateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Election
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addElection: async (electionDto: ElectionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'electionDto' is not null or undefined
            assertParamExists('addElection', 'electionDto', electionDto)
            const localVarPath = `/election`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(electionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Prime Minister
         * @param {PrimeMinisterDto} primeMinisterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPrime: async (primeMinisterDto: PrimeMinisterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'primeMinisterDto' is not null or undefined
            assertParamExists('addPrime', 'primeMinisterDto', primeMinisterDto)
            const localVarPath = `/prime-minister`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(primeMinisterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Representative
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRepresentative: async (representativeDto: RepresentativeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'representativeDto' is not null or undefined
            assertParamExists('addRepresentative', 'representativeDto', representativeDto)
            const localVarPath = `/representative`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(representativeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Student
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudent: async (studentDto: StudentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentDto' is not null or undefined
            assertParamExists('addStudent', 'studentDto', studentDto)
            const localVarPath = `/student`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Student Academic Year
         * @param {StudentAcademicYrDto} studentAcademicYrDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudentAcademicYear: async (studentAcademicYrDto: StudentAcademicYrDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentAcademicYrDto' is not null or undefined
            assertParamExists('addStudentAcademicYear', 'studentAcademicYrDto', studentAcademicYrDto)
            const localVarPath = `/student-academic-yr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentAcademicYrDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Tally 
         * @param {TempTallyDto} tempTallyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTally: async (tempTallyDto: TempTallyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tempTallyDto' is not null or undefined
            assertParamExists('addTally', 'tempTallyDto', tempTallyDto)
            const localVarPath = `/temp-tally`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tempTallyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Users
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsers: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('addUsers', 'userDto', userDto)
            const localVarPath = `/users/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Voter
         * @param {VoterDto} voterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoter: async (voterDto: VoterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voterDto' is not null or undefined
            assertParamExists('addVoter', 'voterDto', voterDto)
            const localVarPath = `/voter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmin: async (adminId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('deleteAdmin', 'adminId', adminId)
            const localVarPath = `/admin/{admin_id}`
                .replace(`{${"admin_id"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCandidate: async (candidateId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('deleteCandidate', 'candidateId', candidateId)
            const localVarPath = `/candidate/{candidate_id}`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteElection: async (electionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'electionId' is not null or undefined
            assertParamExists('deleteElection', 'electionId', electionId)
            const localVarPath = `/election/{election_id}`
                .replace(`{${"election_id"}}`, encodeURIComponent(String(electionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Prime Minister by id
         * @param {number} primeMinisterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrime: async (primeMinisterId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'primeMinisterId' is not null or undefined
            assertParamExists('deletePrime', 'primeMinisterId', primeMinisterId)
            const localVarPath = `/prime-minister/{primeMinister_id}`
                .replace(`{${"primeMinister_id"}}`, encodeURIComponent(String(primeMinisterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Representative by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRepresentative: async (representativeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'representativeId' is not null or undefined
            assertParamExists('deleteRepresentative', 'representativeId', representativeId)
            const localVarPath = `/representative/{representative_id}`
                .replace(`{${"representative_id"}}`, encodeURIComponent(String(representativeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudent: async (studentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('deleteStudent', 'studentId', studentId)
            const localVarPath = `/student/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Student Academic Year by id
         * @param {number} studentAcademicYrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentAcademicYear: async (studentAcademicYrId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentAcademicYrId' is not null or undefined
            assertParamExists('deleteStudentAcademicYear', 'studentAcademicYrId', studentAcademicYrId)
            const localVarPath = `/student-academic-yr/{studentAcademicYr_id}`
                .replace(`{${"studentAcademicYr_id"}}`, encodeURIComponent(String(studentAcademicYrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Tally by id
         * @param {number} tempTallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTally: async (tempTallyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tempTallyId' is not null or undefined
            assertParamExists('deleteTally', 'tempTallyId', tempTallyId)
            const localVarPath = `/temp-tally/{tempTally_id}`
                .replace(`{${"tempTally_id"}}`, encodeURIComponent(String(tempTallyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers: async (accountId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteUsers', 'accountId', accountId)
            const localVarPath = `/users/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Voter by id
         * @param {number} voterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoter: async (voterId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voterId' is not null or undefined
            assertParamExists('deleteVoter', 'voterId', voterId)
            const localVarPath = `/voter/{voter_id}`
                .replace(`{${"voter_id"}}`, encodeURIComponent(String(voterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmin: async (adminId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('getAdmin', 'adminId', adminId)
            const localVarPath = `/admin/{admin_id}`
                .replace(`{${"admin_id"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmins: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidate: async (candidateId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('getCandidate', 'candidateId', candidateId)
            const localVarPath = `/candidate/{candidate_id}`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/candidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElection: async (electionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'electionId' is not null or undefined
            assertParamExists('getElection', 'electionId', electionId)
            const localVarPath = `/election/{election_id}`
                .replace(`{${"election_id"}}`, encodeURIComponent(String(electionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Election
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElections: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/election`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Media
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedia: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMedia', 'id', id)
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Prime Minister by id
         * @param {number} primeMinisterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrime: async (primeMinisterId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'primeMinisterId' is not null or undefined
            assertParamExists('getPrime', 'primeMinisterId', primeMinisterId)
            const localVarPath = `/prime-minister/{primeMinister_id}`
                .replace(`{${"primeMinister_id"}}`, encodeURIComponent(String(primeMinisterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Prime Ministers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrimes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/prime-minister`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Representatives by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepresentative: async (representativeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'representativeId' is not null or undefined
            assertParamExists('getRepresentative', 'representativeId', representativeId)
            const localVarPath = `/representative/{representative_id}`
                .replace(`{${"representative_id"}}`, encodeURIComponent(String(representativeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Representatives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepresentatives: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/representative`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudent: async (studentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('getStudent', 'studentId', studentId)
            const localVarPath = `/student/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Student Academic Year by id
         * @param {number} studentAcademicYrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentAcademicYear: async (studentAcademicYrId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentAcademicYrId' is not null or undefined
            assertParamExists('getStudentAcademicYear', 'studentAcademicYrId', studentAcademicYrId)
            const localVarPath = `/student-academic-yr/{studentAcademicYr_id}`
                .replace(`{${"studentAcademicYr_id"}}`, encodeURIComponent(String(studentAcademicYrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Student Academic Years
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentAcademicYears: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/student-academic-yr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/student`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Tally s
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTallies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/temp-tally`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Tally by id
         * @param {number} tempTallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTally: async (tempTallyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tempTallyId' is not null or undefined
            assertParamExists('getTally', 'tempTallyId', tempTallyId)
            const localVarPath = `/temp-tally/{tempTally_id}`
                .replace(`{${"tempTally_id"}}`, encodeURIComponent(String(tempTallyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (accountId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getUsers', 'accountId', accountId)
            const localVarPath = `/users/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserss: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Voters by id
         * @param {number} voterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoter: async (voterId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voterId' is not null or undefined
            assertParamExists('getVoter', 'voterId', voterId)
            const localVarPath = `/voter/{voter_id}`
                .replace(`{${"voter_id"}}`, encodeURIComponent(String(voterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Voters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoters: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/voter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (username: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('login', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('login', 'password', password)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshDto: RefreshDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshDto' is not null or undefined
            assertParamExists('refreshToken', 'refreshDto', refreshDto)
            const localVarPath = `/auth/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('register', 'userDto', userDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Admin by id
         * @param {number} adminId 
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmin: async (adminId: number, adminDto: AdminDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('updateAdmin', 'adminId', adminId)
            // verify required parameter 'adminDto' is not null or undefined
            assertParamExists('updateAdmin', 'adminDto', adminDto)
            const localVarPath = `/admin/{admin_id}`
                .replace(`{${"admin_id"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Candidate by id
         * @param {number} candidateId 
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCandidate: async (candidateId: number, candidateDto: CandidateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('updateCandidate', 'candidateId', candidateId)
            // verify required parameter 'candidateDto' is not null or undefined
            assertParamExists('updateCandidate', 'candidateDto', candidateDto)
            const localVarPath = `/candidate/{candidate_id}`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(candidateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Election by id
         * @param {number} electionId 
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateElection: async (electionId: number, electionDto: ElectionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'electionId' is not null or undefined
            assertParamExists('updateElection', 'electionId', electionId)
            // verify required parameter 'electionDto' is not null or undefined
            assertParamExists('updateElection', 'electionDto', electionDto)
            const localVarPath = `/election/{election_id}`
                .replace(`{${"election_id"}}`, encodeURIComponent(String(electionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(electionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Prime Minister by id
         * @param {number} primeMinisterId 
         * @param {PrimeMinisterDto} primeMinisterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrime: async (primeMinisterId: number, primeMinisterDto: PrimeMinisterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'primeMinisterId' is not null or undefined
            assertParamExists('updatePrime', 'primeMinisterId', primeMinisterId)
            // verify required parameter 'primeMinisterDto' is not null or undefined
            assertParamExists('updatePrime', 'primeMinisterDto', primeMinisterDto)
            const localVarPath = `/prime-minister/{primeMinister_id}`
                .replace(`{${"primeMinister_id"}}`, encodeURIComponent(String(primeMinisterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(primeMinisterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Representative by id
         * @param {number} representativeId 
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRepresentative: async (representativeId: number, representativeDto: RepresentativeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'representativeId' is not null or undefined
            assertParamExists('updateRepresentative', 'representativeId', representativeId)
            // verify required parameter 'representativeDto' is not null or undefined
            assertParamExists('updateRepresentative', 'representativeDto', representativeDto)
            const localVarPath = `/representative/{representative_id}`
                .replace(`{${"representative_id"}}`, encodeURIComponent(String(representativeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(representativeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Student by id
         * @param {number} studentId 
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudent: async (studentId: number, studentDto: StudentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('updateStudent', 'studentId', studentId)
            // verify required parameter 'studentDto' is not null or undefined
            assertParamExists('updateStudent', 'studentDto', studentDto)
            const localVarPath = `/student/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Student Academic Year by id
         * @param {number} studentAcademicYrId 
         * @param {StudentAcademicYrDto} studentAcademicYrDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentAcademicYear: async (studentAcademicYrId: number, studentAcademicYrDto: StudentAcademicYrDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentAcademicYrId' is not null or undefined
            assertParamExists('updateStudentAcademicYear', 'studentAcademicYrId', studentAcademicYrId)
            // verify required parameter 'studentAcademicYrDto' is not null or undefined
            assertParamExists('updateStudentAcademicYear', 'studentAcademicYrDto', studentAcademicYrDto)
            const localVarPath = `/student-academic-yr/{studentAcademicYr_id}`
                .replace(`{${"studentAcademicYr_id"}}`, encodeURIComponent(String(studentAcademicYrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentAcademicYrDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Tally by id
         * @param {number} tempTallyId 
         * @param {TempTallyDto} tempTallyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTally: async (tempTallyId: number, tempTallyDto: TempTallyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tempTallyId' is not null or undefined
            assertParamExists('updateTally', 'tempTallyId', tempTallyId)
            // verify required parameter 'tempTallyDto' is not null or undefined
            assertParamExists('updateTally', 'tempTallyDto', tempTallyDto)
            const localVarPath = `/temp-tally/{tempTally_id}`
                .replace(`{${"tempTally_id"}}`, encodeURIComponent(String(tempTallyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tempTallyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Users by id
         * @param {number} accountId 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers: async (accountId: number, userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateUsers', 'accountId', accountId)
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('updateUsers', 'userDto', userDto)
            const localVarPath = `/users/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Voter by id
         * @param {number} voterId 
         * @param {VoterDto} voterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoter: async (voterId: number, voterDto: VoterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voterId' is not null or undefined
            assertParamExists('updateVoter', 'voterId', voterId)
            // verify required parameter 'voterDto' is not null or undefined
            assertParamExists('updateVoter', 'voterDto', voterDto)
            const localVarPath = `/voter/{voter_id}`
                .replace(`{${"voter_id"}}`, encodeURIComponent(String(voterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia: async (file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/uploadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new Admin
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAdmin(adminDto: AdminDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAdmin(adminDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Candidate
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCandidate(candidateDto: CandidateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCandidate(candidateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Election
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addElection(electionDto: ElectionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addElection(electionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Prime Minister
         * @param {PrimeMinisterDto} primeMinisterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPrime(primeMinisterDto: PrimeMinisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimeMinisterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPrime(primeMinisterDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Representative
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRepresentative(representativeDto: RepresentativeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentativeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRepresentative(representativeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Student
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addStudent(studentDto: StudentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStudent(studentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Student Academic Year
         * @param {StudentAcademicYrDto} studentAcademicYrDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addStudentAcademicYear(studentAcademicYrDto: StudentAcademicYrDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAcademicYrDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStudentAcademicYear(studentAcademicYrDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Tally 
         * @param {TempTallyDto} tempTallyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTally(tempTallyDto: TempTallyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TempTallyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTally(tempTallyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Users
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUsers(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUsers(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Voter
         * @param {VoterDto} voterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVoter(voterDto: VoterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVoter(voterDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdmin(adminId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdmin(adminId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCandidate(candidateId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCandidate(candidateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteElection(electionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteElection(electionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Prime Minister by id
         * @param {number} primeMinisterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePrime(primeMinisterId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimeMinisterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePrime(primeMinisterId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Representative by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRepresentative(representativeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentativeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRepresentative(representativeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudent(studentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudent(studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Student Academic Year by id
         * @param {number} studentAcademicYrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudentAcademicYear(studentAcademicYrId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAcademicYrDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudentAcademicYear(studentAcademicYrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Tally by id
         * @param {number} tempTallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTally(tempTallyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TempTallyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTally(tempTallyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsers(accountId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsers(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Voter by id
         * @param {number} voterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVoter(voterId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVoter(voterId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmin(adminId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmin(adminId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmins(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmins(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandidate(candidateId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidate(candidateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandidates(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidates(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElection(electionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getElection(electionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Election
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElections(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getElections(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Media
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMedia(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMedia(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Prime Minister by id
         * @param {number} primeMinisterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrime(primeMinisterId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimeMinisterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrime(primeMinisterId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Prime Ministers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrimes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimeMinisterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrimes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Representatives by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRepresentative(representativeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentativeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRepresentative(representativeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Representatives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRepresentatives(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentativeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRepresentatives(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudent(studentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudent(studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Student Academic Year by id
         * @param {number} studentAcademicYrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudentAcademicYear(studentAcademicYrId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAcademicYrDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudentAcademicYear(studentAcademicYrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Student Academic Years
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudentAcademicYears(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAcademicYrDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudentAcademicYears(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Tally s
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTallies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TempTallyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTallies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Tally by id
         * @param {number} tempTallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTally(tempTallyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TempTallyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTally(tempTallyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(accountId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserss(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserss(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Voters by id
         * @param {number} voterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoter(voterId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoter(voterId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Voters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoters(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoters(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(username: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Admin by id
         * @param {number} adminId 
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdmin(adminId: number, adminDto: AdminDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdmin(adminId, adminDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Candidate by id
         * @param {number} candidateId 
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCandidate(candidateId: number, candidateDto: CandidateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCandidate(candidateId, candidateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Election by id
         * @param {number} electionId 
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateElection(electionId: number, electionDto: ElectionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateElection(electionId, electionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Prime Minister by id
         * @param {number} primeMinisterId 
         * @param {PrimeMinisterDto} primeMinisterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrime(primeMinisterId: number, primeMinisterDto: PrimeMinisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimeMinisterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrime(primeMinisterId, primeMinisterDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Representative by id
         * @param {number} representativeId 
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRepresentative(representativeId: number, representativeDto: RepresentativeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentativeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRepresentative(representativeId, representativeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Student by id
         * @param {number} studentId 
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudent(studentId: number, studentDto: StudentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudent(studentId, studentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Student Academic Year by id
         * @param {number} studentAcademicYrId 
         * @param {StudentAcademicYrDto} studentAcademicYrDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudentAcademicYear(studentAcademicYrId: number, studentAcademicYrDto: StudentAcademicYrDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAcademicYrDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudentAcademicYear(studentAcademicYrId, studentAcademicYrDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Tally by id
         * @param {number} tempTallyId 
         * @param {TempTallyDto} tempTallyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTally(tempTallyId: number, tempTallyDto: TempTallyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TempTallyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTally(tempTallyId, tempTallyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Users by id
         * @param {number} accountId 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsers(accountId: number, userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsers(accountId, userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Voter by id
         * @param {number} voterId 
         * @param {VoterDto} voterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVoter(voterId: number, voterDto: VoterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVoter(voterId, voterDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMedia(file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMedia(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new Admin
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdmin(adminDto: AdminDto, options?: any): AxiosPromise<AdminDto> {
            return localVarFp.addAdmin(adminDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Candidate
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCandidate(candidateDto: CandidateDto, options?: any): AxiosPromise<CandidateDto> {
            return localVarFp.addCandidate(candidateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Election
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addElection(electionDto: ElectionDto, options?: any): AxiosPromise<ElectionDto> {
            return localVarFp.addElection(electionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Prime Minister
         * @param {PrimeMinisterDto} primeMinisterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPrime(primeMinisterDto: PrimeMinisterDto, options?: any): AxiosPromise<PrimeMinisterDto> {
            return localVarFp.addPrime(primeMinisterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Representative
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRepresentative(representativeDto: RepresentativeDto, options?: any): AxiosPromise<RepresentativeDto> {
            return localVarFp.addRepresentative(representativeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Student
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudent(studentDto: StudentDto, options?: any): AxiosPromise<StudentDto> {
            return localVarFp.addStudent(studentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Student Academic Year
         * @param {StudentAcademicYrDto} studentAcademicYrDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudentAcademicYear(studentAcademicYrDto: StudentAcademicYrDto, options?: any): AxiosPromise<StudentAcademicYrDto> {
            return localVarFp.addStudentAcademicYear(studentAcademicYrDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Tally 
         * @param {TempTallyDto} tempTallyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTally(tempTallyDto: TempTallyDto, options?: any): AxiosPromise<TempTallyDto> {
            return localVarFp.addTally(tempTallyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Users
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsers(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.addUsers(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Voter
         * @param {VoterDto} voterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoter(voterDto: VoterDto, options?: any): AxiosPromise<VoterDto> {
            return localVarFp.addVoter(voterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmin(adminId: number, options?: any): AxiosPromise<AdminDto> {
            return localVarFp.deleteAdmin(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCandidate(candidateId: number, options?: any): AxiosPromise<CandidateDto> {
            return localVarFp.deleteCandidate(candidateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteElection(electionId: number, options?: any): AxiosPromise<ElectionDto> {
            return localVarFp.deleteElection(electionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Prime Minister by id
         * @param {number} primeMinisterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrime(primeMinisterId: number, options?: any): AxiosPromise<PrimeMinisterDto> {
            return localVarFp.deletePrime(primeMinisterId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Representative by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRepresentative(representativeId: number, options?: any): AxiosPromise<RepresentativeDto> {
            return localVarFp.deleteRepresentative(representativeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudent(studentId: number, options?: any): AxiosPromise<StudentDto> {
            return localVarFp.deleteStudent(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Student Academic Year by id
         * @param {number} studentAcademicYrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentAcademicYear(studentAcademicYrId: number, options?: any): AxiosPromise<StudentAcademicYrDto> {
            return localVarFp.deleteStudentAcademicYear(studentAcademicYrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Tally by id
         * @param {number} tempTallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTally(tempTallyId: number, options?: any): AxiosPromise<TempTallyDto> {
            return localVarFp.deleteTally(tempTallyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers(accountId: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.deleteUsers(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Voter by id
         * @param {number} voterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoter(voterId: number, options?: any): AxiosPromise<VoterDto> {
            return localVarFp.deleteVoter(voterId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmin(adminId: number, options?: any): AxiosPromise<AdminDto> {
            return localVarFp.getAdmin(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmins(options?: any): AxiosPromise<AdminDto> {
            return localVarFp.getAdmins(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidate(candidateId: number, options?: any): AxiosPromise<CandidateDto> {
            return localVarFp.getCandidate(candidateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates(options?: any): AxiosPromise<CandidateDto> {
            return localVarFp.getCandidates(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElection(electionId: number, options?: any): AxiosPromise<ElectionDto> {
            return localVarFp.getElection(electionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Election
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElections(options?: any): AxiosPromise<ElectionDto> {
            return localVarFp.getElections(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Media
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedia(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.getMedia(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Prime Minister by id
         * @param {number} primeMinisterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrime(primeMinisterId: number, options?: any): AxiosPromise<PrimeMinisterDto> {
            return localVarFp.getPrime(primeMinisterId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Prime Ministers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrimes(options?: any): AxiosPromise<PrimeMinisterDto> {
            return localVarFp.getPrimes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Representatives by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepresentative(representativeId: number, options?: any): AxiosPromise<RepresentativeDto> {
            return localVarFp.getRepresentative(representativeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Representatives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepresentatives(options?: any): AxiosPromise<RepresentativeDto> {
            return localVarFp.getRepresentatives(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudent(studentId: number, options?: any): AxiosPromise<StudentDto> {
            return localVarFp.getStudent(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Student Academic Year by id
         * @param {number} studentAcademicYrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentAcademicYear(studentAcademicYrId: number, options?: any): AxiosPromise<StudentAcademicYrDto> {
            return localVarFp.getStudentAcademicYear(studentAcademicYrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Student Academic Years
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentAcademicYears(options?: any): AxiosPromise<StudentAcademicYrDto> {
            return localVarFp.getStudentAcademicYears(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudents(options?: any): AxiosPromise<StudentDto> {
            return localVarFp.getStudents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Tally s
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTallies(options?: any): AxiosPromise<TempTallyDto> {
            return localVarFp.getTallies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Tally by id
         * @param {number} tempTallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTally(tempTallyId: number, options?: any): AxiosPromise<TempTallyDto> {
            return localVarFp.getTally(tempTallyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(accountId: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUsers(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserss(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUserss(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Voters by id
         * @param {number} voterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoter(voterId: number, options?: any): AxiosPromise<VoterDto> {
            return localVarFp.getVoter(voterId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Voters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoters(options?: any): AxiosPromise<VoterDto> {
            return localVarFp.getVoters(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(username: string, password: string, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.login(username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshDto: RefreshDto, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.refreshToken(refreshDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.register(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Admin by id
         * @param {number} adminId 
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmin(adminId: number, adminDto: AdminDto, options?: any): AxiosPromise<AdminDto> {
            return localVarFp.updateAdmin(adminId, adminDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Candidate by id
         * @param {number} candidateId 
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCandidate(candidateId: number, candidateDto: CandidateDto, options?: any): AxiosPromise<CandidateDto> {
            return localVarFp.updateCandidate(candidateId, candidateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Election by id
         * @param {number} electionId 
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateElection(electionId: number, electionDto: ElectionDto, options?: any): AxiosPromise<ElectionDto> {
            return localVarFp.updateElection(electionId, electionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Prime Minister by id
         * @param {number} primeMinisterId 
         * @param {PrimeMinisterDto} primeMinisterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrime(primeMinisterId: number, primeMinisterDto: PrimeMinisterDto, options?: any): AxiosPromise<PrimeMinisterDto> {
            return localVarFp.updatePrime(primeMinisterId, primeMinisterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Representative by id
         * @param {number} representativeId 
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRepresentative(representativeId: number, representativeDto: RepresentativeDto, options?: any): AxiosPromise<RepresentativeDto> {
            return localVarFp.updateRepresentative(representativeId, representativeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Student by id
         * @param {number} studentId 
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudent(studentId: number, studentDto: StudentDto, options?: any): AxiosPromise<StudentDto> {
            return localVarFp.updateStudent(studentId, studentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Student Academic Year by id
         * @param {number} studentAcademicYrId 
         * @param {StudentAcademicYrDto} studentAcademicYrDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentAcademicYear(studentAcademicYrId: number, studentAcademicYrDto: StudentAcademicYrDto, options?: any): AxiosPromise<StudentAcademicYrDto> {
            return localVarFp.updateStudentAcademicYear(studentAcademicYrId, studentAcademicYrDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Tally by id
         * @param {number} tempTallyId 
         * @param {TempTallyDto} tempTallyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTally(tempTallyId: number, tempTallyDto: TempTallyDto, options?: any): AxiosPromise<TempTallyDto> {
            return localVarFp.updateTally(tempTallyId, tempTallyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Users by id
         * @param {number} accountId 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers(accountId: number, userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.updateUsers(accountId, userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Voter by id
         * @param {number} voterId 
         * @param {VoterDto} voterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoter(voterId: number, voterDto: VoterDto, options?: any): AxiosPromise<VoterDto> {
            return localVarFp.updateVoter(voterId, voterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia(file?: any, options?: any): AxiosPromise<MediaDto> {
            return localVarFp.uploadMedia(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add new Admin
     * @param {AdminDto} adminDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addAdmin(adminDto: AdminDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addAdmin(adminDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Candidate
     * @param {CandidateDto} candidateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCandidate(candidateDto: CandidateDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addCandidate(candidateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Election
     * @param {ElectionDto} electionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addElection(electionDto: ElectionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addElection(electionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Prime Minister
     * @param {PrimeMinisterDto} primeMinisterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addPrime(primeMinisterDto: PrimeMinisterDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addPrime(primeMinisterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Representative
     * @param {RepresentativeDto} representativeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addRepresentative(representativeDto: RepresentativeDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addRepresentative(representativeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Student
     * @param {StudentDto} studentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addStudent(studentDto: StudentDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addStudent(studentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Student Academic Year
     * @param {StudentAcademicYrDto} studentAcademicYrDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addStudentAcademicYear(studentAcademicYrDto: StudentAcademicYrDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addStudentAcademicYear(studentAcademicYrDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Tally 
     * @param {TempTallyDto} tempTallyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addTally(tempTallyDto: TempTallyDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addTally(tempTallyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Users
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUsers(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addUsers(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Voter
     * @param {VoterDto} voterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addVoter(voterDto: VoterDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addVoter(voterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Admin by id
     * @param {number} adminId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAdmin(adminId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAdmin(adminId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Candidate by id
     * @param {number} candidateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCandidate(candidateId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCandidate(candidateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Election by id
     * @param {number} electionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteElection(electionId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteElection(electionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Prime Minister by id
     * @param {number} primeMinisterId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePrime(primeMinisterId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePrime(primeMinisterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Representative by id
     * @param {number} representativeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRepresentative(representativeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRepresentative(representativeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Student by id
     * @param {number} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStudent(studentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteStudent(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Student Academic Year by id
     * @param {number} studentAcademicYrId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStudentAcademicYear(studentAcademicYrId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteStudentAcademicYear(studentAcademicYrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Tally by id
     * @param {number} tempTallyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTally(tempTallyId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTally(tempTallyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Users by id
     * @param {number} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUsers(accountId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUsers(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Voter by id
     * @param {number} voterId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteVoter(voterId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteVoter(voterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Admin by id
     * @param {number} adminId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdmin(adminId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdmin(adminId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Admins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdmins(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdmins(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Candidate by id
     * @param {number} candidateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCandidate(candidateId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCandidate(candidateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Candidate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCandidates(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCandidates(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Election by id
     * @param {number} electionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getElection(electionId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getElection(electionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Election
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getElections(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getElections(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Media
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMedia(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMedia(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Prime Minister by id
     * @param {number} primeMinisterId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPrime(primeMinisterId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPrime(primeMinisterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Prime Ministers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPrimes(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPrimes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get profile info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Representatives by id
     * @param {number} representativeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRepresentative(representativeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRepresentative(representativeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Representatives
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRepresentatives(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRepresentatives(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Student by id
     * @param {number} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStudent(studentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStudent(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Student Academic Year by id
     * @param {number} studentAcademicYrId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStudentAcademicYear(studentAcademicYrId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStudentAcademicYear(studentAcademicYrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Student Academic Years
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStudentAcademicYears(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStudentAcademicYears(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Students
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStudents(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStudents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Tally s
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTallies(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTallies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Tally by id
     * @param {number} tempTallyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTally(tempTallyId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTally(tempTallyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Users by id
     * @param {number} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(accountId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserss(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserss(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Voters by id
     * @param {number} voterId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVoter(voterId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVoter(voterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Voters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVoters(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVoters(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login User
     * @param {string} username 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(username: string, password: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary logout given user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Token
     * @param {RefreshDto} refreshDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refreshToken(refreshDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register User
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).register(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Admin by id
     * @param {number} adminId 
     * @param {AdminDto} adminDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAdmin(adminId: number, adminDto: AdminDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAdmin(adminId, adminDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Candidate by id
     * @param {number} candidateId 
     * @param {CandidateDto} candidateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCandidate(candidateId: number, candidateDto: CandidateDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCandidate(candidateId, candidateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Election by id
     * @param {number} electionId 
     * @param {ElectionDto} electionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateElection(electionId: number, electionDto: ElectionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateElection(electionId, electionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Prime Minister by id
     * @param {number} primeMinisterId 
     * @param {PrimeMinisterDto} primeMinisterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePrime(primeMinisterId: number, primeMinisterDto: PrimeMinisterDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatePrime(primeMinisterId, primeMinisterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Representative by id
     * @param {number} representativeId 
     * @param {RepresentativeDto} representativeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRepresentative(representativeId: number, representativeDto: RepresentativeDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRepresentative(representativeId, representativeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Student by id
     * @param {number} studentId 
     * @param {StudentDto} studentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateStudent(studentId: number, studentDto: StudentDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateStudent(studentId, studentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Student Academic Year by id
     * @param {number} studentAcademicYrId 
     * @param {StudentAcademicYrDto} studentAcademicYrDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateStudentAcademicYear(studentAcademicYrId: number, studentAcademicYrDto: StudentAcademicYrDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateStudentAcademicYear(studentAcademicYrId, studentAcademicYrDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Tally by id
     * @param {number} tempTallyId 
     * @param {TempTallyDto} tempTallyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTally(tempTallyId: number, tempTallyDto: TempTallyDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateTally(tempTallyId, tempTallyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Users by id
     * @param {number} accountId 
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUsers(accountId: number, userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUsers(accountId, userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Voter by id
     * @param {number} voterId 
     * @param {VoterDto} voterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateVoter(voterId: number, voterDto: VoterDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateVoter(voterId, voterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Media
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadMedia(file?: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadMedia(file, options).then((request) => request(this.axios, this.basePath));
    }
}


