/* tslint:disable */
/* eslint-disable */
/**
 * SSG Election
 * The SSG Election API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenDto
 */
export interface AccessTokenDto {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface AdminDto
 */
export interface AdminDto {
    /**
     * 
     * @type {number}
     * @memberof AdminDto
     */
    'admin_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdminDto
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof AdminDto
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof AdminDto
     */
    'position': string;
    /**
     * 
     * @type {UserDto}
     * @memberof AdminDto
     */
    'user'?: UserDto;
}
/**
 * 
 * @export
 * @interface CandidateDto
 */
export interface CandidateDto {
    /**
     * 
     * @type {number}
     * @memberof CandidateDto
     */
    'candidate_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CandidateDto
     */
    'position_type': string;
    /**
     * 
     * @type {string}
     * @memberof CandidateDto
     */
    'platform': string;
    /**
     * 
     * @type {ElectionDto}
     * @memberof CandidateDto
     */
    'election'?: ElectionDto;
    /**
     * 
     * @type {StudentDto}
     * @memberof CandidateDto
     */
    'student'?: StudentDto;
}
/**
 * 
 * @export
 * @interface ElectionDto
 */
export interface ElectionDto {
    /**
     * 
     * @type {number}
     * @memberof ElectionDto
     */
    'election_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'election_name': string;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'election_type': string;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'academic_yr': string;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'start_time': string;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'end_date': string;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'end_time': string;
    /**
     * 
     * @type {string}
     * @memberof ElectionDto
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface LoginUserDto
 */
export interface LoginUserDto {
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface MediaDto
 */
export interface MediaDto {
    /**
     * 
     * @type {number}
     * @memberof MediaDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaDto
     */
    'mimeType': string;
    /**
     * 
     * @type {string}
     * @memberof MediaDto
     */
    'filename'?: string;
}
/**
 * 
 * @export
 * @interface PositionDto
 */
export interface PositionDto {
    /**
     * 
     * @type {number}
     * @memberof PositionDto
     */
    'position_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'chiefJustice': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'associateJustice': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'speakerHouse': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'internalDeputy': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'externalDeputy': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'ministerHealth': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'ministerInfo': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'ministerPlanning': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'ministerAcadAffairs': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'ministerFinance': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'commissionAudit': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'commissionElection': string;
    /**
     * 
     * @type {string}
     * @memberof PositionDto
     */
    'commissionWelfare': string;
    /**
     * 
     * @type {StudentDto}
     * @memberof PositionDto
     */
    'student'?: StudentDto;
}
/**
 * 
 * @export
 * @interface RefreshDto
 */
export interface RefreshDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshDto
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface RepresentativeDto
 */
export interface RepresentativeDto {
    /**
     * 
     * @type {number}
     * @memberof RepresentativeDto
     */
    'representative_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RepresentativeDto
     */
    'position': string;
    /**
     * 
     * @type {string}
     * @memberof RepresentativeDto
     */
    'platform': string;
    /**
     * 
     * @type {StudentDto}
     * @memberof RepresentativeDto
     */
    'student'?: StudentDto;
    /**
     * 
     * @type {ElectionDto}
     * @memberof RepresentativeDto
     */
    'election'?: ElectionDto;
}
/**
 * 
 * @export
 * @interface SsgMemberDto
 */
export interface SsgMemberDto {
    /**
     * 
     * @type {number}
     * @memberof SsgMemberDto
     */
    'ssg_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SsgMemberDto
     */
    'academic_yr': string;
    /**
     * 
     * @type {string}
     * @memberof SsgMemberDto
     */
    'position': string;
    /**
     * 
     * @type {StudentDto}
     * @memberof SsgMemberDto
     */
    'student'?: StudentDto;
}
/**
 * 
 * @export
 * @interface StudentDto
 */
export interface StudentDto {
    /**
     * 
     * @type {number}
     * @memberof StudentDto
     */
    'student_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof StudentDto
     */
    'school_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'suffix'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'yr_admitted': string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'college': string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'course': string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'department': string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    'student_type': string;
    /**
     * 
     * @type {number}
     * @memberof StudentDto
     */
    'url'?: number;
    /**
     * 
     * @type {UserDto}
     * @memberof StudentDto
     */
    'user'?: UserDto;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'account_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'userType': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {StudentDto}
     * @memberof UserDto
     */
    'student'?: StudentDto;
    /**
     * 
     * @type {AdminDto}
     * @memberof UserDto
     */
    'admin'?: AdminDto;
    /**
     * 
     * @type {VoteRepDto}
     * @memberof UserDto
     */
    'vote'?: VoteRepDto;
    /**
     * 
     * @type {VoteSsgDto}
     * @memberof UserDto
     */
    'votessg'?: VoteSsgDto;
}
/**
 * 
 * @export
 * @interface VoteRepDto
 */
export interface VoteRepDto {
    /**
     * 
     * @type {number}
     * @memberof VoteRepDto
     */
    'vote_rep_id'?: number;
    /**
     * 
     * @type {StudentDto}
     * @memberof VoteRepDto
     */
    'rep1': StudentDto;
    /**
     * 
     * @type {StudentDto}
     * @memberof VoteRepDto
     */
    'rep2': StudentDto;
    /**
     * 
     * @type {string}
     * @memberof VoteRepDto
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof VoteRepDto
     */
    'time': string;
    /**
     * 
     * @type {string}
     * @memberof VoteRepDto
     */
    'voter_status': string;
    /**
     * 
     * @type {StudentDto}
     * @memberof VoteRepDto
     */
    'student'?: StudentDto;
    /**
     * 
     * @type {ElectionDto}
     * @memberof VoteRepDto
     */
    'election'?: ElectionDto;
}
/**
 * 
 * @export
 * @interface VoteSsgDto
 */
export interface VoteSsgDto {
    /**
     * 
     * @type {number}
     * @memberof VoteSsgDto
     */
    'vote_ssg_id'?: number;
    /**
     * 
     * @type {StudentDto}
     * @memberof VoteSsgDto
     */
    'prime': StudentDto;
    /**
     * 
     * @type {StudentDto}
     * @memberof VoteSsgDto
     */
    'secretary': StudentDto;
    /**
     * 
     * @type {string}
     * @memberof VoteSsgDto
     */
    'voter_status': string;
    /**
     * 
     * @type {string}
     * @memberof VoteSsgDto
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof VoteSsgDto
     */
    'time': string;
    /**
     * 
     * @type {StudentDto}
     * @memberof VoteSsgDto
     */
    'student'?: StudentDto;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new Admin
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdmin: async (adminDto: AdminDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminDto' is not null or undefined
            assertParamExists('addAdmin', 'adminDto', adminDto)
            const localVarPath = `/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Candidate
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCandidate: async (candidateDto: CandidateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateDto' is not null or undefined
            assertParamExists('addCandidate', 'candidateDto', candidateDto)
            const localVarPath = `/candidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(candidateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Election
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addElection: async (electionDto: ElectionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'electionDto' is not null or undefined
            assertParamExists('addElection', 'electionDto', electionDto)
            const localVarPath = `/election`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(electionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Position
         * @param {PositionDto} positionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPosition: async (positionDto: PositionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionDto' is not null or undefined
            assertParamExists('addPosition', 'positionDto', positionDto)
            const localVarPath = `/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(positionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Representative
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRepresentative: async (representativeDto: RepresentativeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'representativeDto' is not null or undefined
            assertParamExists('addRepresentative', 'representativeDto', representativeDto)
            const localVarPath = `/representative`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(representativeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new SSG Member
         * @param {SsgMemberDto} ssgMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSsg: async (ssgMemberDto: SsgMemberDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ssgMemberDto' is not null or undefined
            assertParamExists('addSsg', 'ssgMemberDto', ssgMemberDto)
            const localVarPath = `/ssg-member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ssgMemberDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Student
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudent: async (studentDto: StudentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentDto' is not null or undefined
            assertParamExists('addStudent', 'studentDto', studentDto)
            const localVarPath = `/student`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Users
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsers: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('addUsers', 'userDto', userDto)
            const localVarPath = `/users/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Representative Candidate
         * @param {VoteRepDto} voteRepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoteRep: async (voteRepDto: VoteRepDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voteRepDto' is not null or undefined
            assertParamExists('addVoteRep', 'voteRepDto', voteRepDto)
            const localVarPath = `/vote-rep`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voteRepDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new SSG Candidate
         * @param {VoteSsgDto} voteSsgDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoteSsg: async (voteSsgDto: VoteSsgDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voteSsgDto' is not null or undefined
            assertParamExists('addVoteSsg', 'voteSsgDto', voteSsgDto)
            const localVarPath = `/vote-ssg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voteSsgDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmin: async (adminId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('deleteAdmin', 'adminId', adminId)
            const localVarPath = `/admin/{admin_id}`
                .replace(`{${"admin_id"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCandidate: async (candidateId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('deleteCandidate', 'candidateId', candidateId)
            const localVarPath = `/candidate/{candidate_id}`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteElection: async (electionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'electionId' is not null or undefined
            assertParamExists('deleteElection', 'electionId', electionId)
            const localVarPath = `/election/{election_id}`
                .replace(`{${"election_id"}}`, encodeURIComponent(String(electionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedia: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMedia', 'id', id)
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Position by id
         * @param {number} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePosition: async (positionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('deletePosition', 'positionId', positionId)
            const localVarPath = `/position/{position_id}`
                .replace(`{${"position_id"}}`, encodeURIComponent(String(positionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Representative by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRepresentative: async (representativeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'representativeId' is not null or undefined
            assertParamExists('deleteRepresentative', 'representativeId', representativeId)
            const localVarPath = `/representative/{representative_id}`
                .replace(`{${"representative_id"}}`, encodeURIComponent(String(representativeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete SSG Member by id
         * @param {number} ssgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSsg: async (ssgId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ssgId' is not null or undefined
            assertParamExists('deleteSsg', 'ssgId', ssgId)
            const localVarPath = `/ssg-member/{ssg_id}`
                .replace(`{${"ssg_id"}}`, encodeURIComponent(String(ssgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudent: async (studentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('deleteStudent', 'studentId', studentId)
            const localVarPath = `/student/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers: async (accountId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteUsers', 'accountId', accountId)
            const localVarPath = `/users/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Representative Candidate by id
         * @param {number} voterRepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoteRep: async (voterRepId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voterRepId' is not null or undefined
            assertParamExists('deleteVoteRep', 'voterRepId', voterRepId)
            const localVarPath = `/vote-rep/{voter_rep_id}`
                .replace(`{${"voter_rep_id"}}`, encodeURIComponent(String(voterRepId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete SSG Candidate by id
         * @param {number} voterSsgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoteSsg: async (voterSsgId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voterSsgId' is not null or undefined
            assertParamExists('deleteVoteSsg', 'voterSsgId', voterSsgId)
            const localVarPath = `/vote-ssg/{voter_ssg_id}`
                .replace(`{${"voter_ssg_id"}}`, encodeURIComponent(String(voterSsgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmin: async (adminId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('getAdmin', 'adminId', adminId)
            const localVarPath = `/admin/{admin_id}`
                .replace(`{${"admin_id"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmins: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidate: async (candidateId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('getCandidate', 'candidateId', candidateId)
            const localVarPath = `/candidate/{candidate_id}`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/candidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElection: async (electionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'electionId' is not null or undefined
            assertParamExists('getElection', 'electionId', electionId)
            const localVarPath = `/election/{election_id}`
                .replace(`{${"election_id"}}`, encodeURIComponent(String(electionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Election
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElections: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/election`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedia: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMedia', 'id', id)
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Positions by id
         * @param {number} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosition: async (positionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('getPosition', 'positionId', positionId)
            const localVarPath = `/position/{position_id}`
                .replace(`{${"position_id"}}`, encodeURIComponent(String(positionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Positions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Representatives by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepresentative: async (representativeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'representativeId' is not null or undefined
            assertParamExists('getRepresentative', 'representativeId', representativeId)
            const localVarPath = `/representative/{representative_id}`
                .replace(`{${"representative_id"}}`, encodeURIComponent(String(representativeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Representatives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepresentatives: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/representative`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get SSG Members by id
         * @param {number} ssgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsg: async (ssgId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ssgId' is not null or undefined
            assertParamExists('getSsg', 'ssgId', ssgId)
            const localVarPath = `/ssg-member/{ssg_id}`
                .replace(`{${"ssg_id"}}`, encodeURIComponent(String(ssgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all SSG Members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsgs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ssg-member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudent: async (studentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('getStudent', 'studentId', studentId)
            const localVarPath = `/student/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/student`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (accountId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getUsers', 'accountId', accountId)
            const localVarPath = `/users/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserss: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Representative Candidate by id
         * @param {number} voterRepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteRep: async (voterRepId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voterRepId' is not null or undefined
            assertParamExists('getVoteRep', 'voterRepId', voterRepId)
            const localVarPath = `/vote-rep/{voter_rep_id}`
                .replace(`{${"voter_rep_id"}}`, encodeURIComponent(String(voterRepId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Representative Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteReps: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vote-rep`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get SSG Candidate by id
         * @param {number} voterSsgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteSsg: async (voterSsgId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voterSsgId' is not null or undefined
            assertParamExists('getVoteSsg', 'voterSsgId', voterSsgId)
            const localVarPath = `/vote-ssg/{voter_ssg_id}`
                .replace(`{${"voter_ssg_id"}}`, encodeURIComponent(String(voterSsgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all SSG Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteSsgs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vote-ssg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login User
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginUserDto: LoginUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserDto' is not null or undefined
            assertParamExists('login', 'loginUserDto', loginUserDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshDto: RefreshDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshDto' is not null or undefined
            assertParamExists('refreshToken', 'refreshDto', refreshDto)
            const localVarPath = `/auth/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('register', 'userDto', userDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Admin by id
         * @param {number} adminId 
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmin: async (adminId: number, adminDto: AdminDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('updateAdmin', 'adminId', adminId)
            // verify required parameter 'adminDto' is not null or undefined
            assertParamExists('updateAdmin', 'adminDto', adminDto)
            const localVarPath = `/admin/{admin_id}`
                .replace(`{${"admin_id"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Candidate by id
         * @param {number} candidateId 
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCandidate: async (candidateId: number, candidateDto: CandidateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('updateCandidate', 'candidateId', candidateId)
            // verify required parameter 'candidateDto' is not null or undefined
            assertParamExists('updateCandidate', 'candidateDto', candidateDto)
            const localVarPath = `/candidate/{candidate_id}`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(candidateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Election by id
         * @param {number} electionId 
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateElection: async (electionId: number, electionDto: ElectionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'electionId' is not null or undefined
            assertParamExists('updateElection', 'electionId', electionId)
            // verify required parameter 'electionDto' is not null or undefined
            assertParamExists('updateElection', 'electionDto', electionDto)
            const localVarPath = `/election/{election_id}`
                .replace(`{${"election_id"}}`, encodeURIComponent(String(electionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(electionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Position by id
         * @param {number} positionId 
         * @param {PositionDto} positionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosition: async (positionId: number, positionDto: PositionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('updatePosition', 'positionId', positionId)
            // verify required parameter 'positionDto' is not null or undefined
            assertParamExists('updatePosition', 'positionDto', positionDto)
            const localVarPath = `/position/{position_id}`
                .replace(`{${"position_id"}}`, encodeURIComponent(String(positionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(positionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Representative by id
         * @param {number} representativeId 
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRepresentative: async (representativeId: number, representativeDto: RepresentativeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'representativeId' is not null or undefined
            assertParamExists('updateRepresentative', 'representativeId', representativeId)
            // verify required parameter 'representativeDto' is not null or undefined
            assertParamExists('updateRepresentative', 'representativeDto', representativeDto)
            const localVarPath = `/representative/{representative_id}`
                .replace(`{${"representative_id"}}`, encodeURIComponent(String(representativeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(representativeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update SSG Member by id
         * @param {number} ssgId 
         * @param {SsgMemberDto} ssgMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSsg: async (ssgId: number, ssgMemberDto: SsgMemberDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ssgId' is not null or undefined
            assertParamExists('updateSsg', 'ssgId', ssgId)
            // verify required parameter 'ssgMemberDto' is not null or undefined
            assertParamExists('updateSsg', 'ssgMemberDto', ssgMemberDto)
            const localVarPath = `/ssg-member/{ssg_id}`
                .replace(`{${"ssg_id"}}`, encodeURIComponent(String(ssgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ssgMemberDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Student by id
         * @param {number} studentId 
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudent: async (studentId: number, studentDto: StudentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('updateStudent', 'studentId', studentId)
            // verify required parameter 'studentDto' is not null or undefined
            assertParamExists('updateStudent', 'studentDto', studentDto)
            const localVarPath = `/student/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Users by id
         * @param {number} accountId 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers: async (accountId: number, userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateUsers', 'accountId', accountId)
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('updateUsers', 'userDto', userDto)
            const localVarPath = `/users/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Representative Candidate by id
         * @param {number} voterRepId 
         * @param {VoteRepDto} voteRepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoteRep: async (voterRepId: number, voteRepDto: VoteRepDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voterRepId' is not null or undefined
            assertParamExists('updateVoteRep', 'voterRepId', voterRepId)
            // verify required parameter 'voteRepDto' is not null or undefined
            assertParamExists('updateVoteRep', 'voteRepDto', voteRepDto)
            const localVarPath = `/vote-rep/{voter_rep_id}`
                .replace(`{${"voter_rep_id"}}`, encodeURIComponent(String(voterRepId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voteRepDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update SSG Candidate by id
         * @param {number} voterSsgId 
         * @param {VoteSsgDto} voteSsgDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoteSsg: async (voterSsgId: number, voteSsgDto: VoteSsgDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voterSsgId' is not null or undefined
            assertParamExists('updateVoteSsg', 'voterSsgId', voterSsgId)
            // verify required parameter 'voteSsgDto' is not null or undefined
            assertParamExists('updateVoteSsg', 'voteSsgDto', voteSsgDto)
            const localVarPath = `/vote-ssg/{voter_ssg_id}`
                .replace(`{${"voter_ssg_id"}}`, encodeURIComponent(String(voterSsgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voteSsgDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia: async (file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/uploadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new Admin
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAdmin(adminDto: AdminDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAdmin(adminDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Candidate
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCandidate(candidateDto: CandidateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCandidate(candidateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Election
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addElection(electionDto: ElectionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addElection(electionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Position
         * @param {PositionDto} positionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPosition(positionDto: PositionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPosition(positionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Representative
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRepresentative(representativeDto: RepresentativeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentativeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRepresentative(representativeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new SSG Member
         * @param {SsgMemberDto} ssgMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSsg(ssgMemberDto: SsgMemberDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SsgMemberDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSsg(ssgMemberDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Student
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addStudent(studentDto: StudentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStudent(studentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Users
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUsers(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUsers(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Representative Candidate
         * @param {VoteRepDto} voteRepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVoteRep(voteRepDto: VoteRepDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteRepDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVoteRep(voteRepDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new SSG Candidate
         * @param {VoteSsgDto} voteSsgDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVoteSsg(voteSsgDto: VoteSsgDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteSsgDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVoteSsg(voteSsgDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdmin(adminId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdmin(adminId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCandidate(candidateId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCandidate(candidateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteElection(electionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteElection(electionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMedia(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMedia(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Position by id
         * @param {number} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePosition(positionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePosition(positionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Representative by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRepresentative(representativeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentativeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRepresentative(representativeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete SSG Member by id
         * @param {number} ssgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSsg(ssgId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SsgMemberDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSsg(ssgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudent(studentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudent(studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsers(accountId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsers(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Representative Candidate by id
         * @param {number} voterRepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVoteRep(voterRepId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteRepDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVoteRep(voterRepId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete SSG Candidate by id
         * @param {number} voterSsgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVoteSsg(voterSsgId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteSsgDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVoteSsg(voterSsgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmin(adminId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmin(adminId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmins(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmins(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandidate(candidateId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidate(candidateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandidates(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidates(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElection(electionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getElection(electionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Election
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElections(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getElections(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMedia(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMedia(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Positions by id
         * @param {number} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosition(positionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosition(positionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Positions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPositions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPositions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Representatives by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRepresentative(representativeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentativeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRepresentative(representativeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Representatives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRepresentatives(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentativeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRepresentatives(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get SSG Members by id
         * @param {number} ssgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSsg(ssgId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SsgMemberDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSsg(ssgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all SSG Members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSsgs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SsgMemberDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSsgs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudent(studentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudent(studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(accountId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserss(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserss(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Representative Candidate by id
         * @param {number} voterRepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoteRep(voterRepId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteRepDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoteRep(voterRepId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Representative Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoteReps(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteRepDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoteReps(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get SSG Candidate by id
         * @param {number} voterSsgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoteSsg(voterSsgId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteSsgDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoteSsg(voterSsgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all SSG Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoteSsgs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteSsgDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoteSsgs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login User
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginUserDto: LoginUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Admin by id
         * @param {number} adminId 
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdmin(adminId: number, adminDto: AdminDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdmin(adminId, adminDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Candidate by id
         * @param {number} candidateId 
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCandidate(candidateId: number, candidateDto: CandidateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCandidate(candidateId, candidateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Election by id
         * @param {number} electionId 
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateElection(electionId: number, electionDto: ElectionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateElection(electionId, electionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Position by id
         * @param {number} positionId 
         * @param {PositionDto} positionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePosition(positionId: number, positionDto: PositionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePosition(positionId, positionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Representative by id
         * @param {number} representativeId 
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRepresentative(representativeId: number, representativeDto: RepresentativeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentativeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRepresentative(representativeId, representativeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update SSG Member by id
         * @param {number} ssgId 
         * @param {SsgMemberDto} ssgMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSsg(ssgId: number, ssgMemberDto: SsgMemberDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SsgMemberDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSsg(ssgId, ssgMemberDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Student by id
         * @param {number} studentId 
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudent(studentId: number, studentDto: StudentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudent(studentId, studentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Users by id
         * @param {number} accountId 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsers(accountId: number, userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsers(accountId, userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Representative Candidate by id
         * @param {number} voterRepId 
         * @param {VoteRepDto} voteRepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVoteRep(voterRepId: number, voteRepDto: VoteRepDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteRepDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVoteRep(voterRepId, voteRepDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update SSG Candidate by id
         * @param {number} voterSsgId 
         * @param {VoteSsgDto} voteSsgDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVoteSsg(voterSsgId: number, voteSsgDto: VoteSsgDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteSsgDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVoteSsg(voterSsgId, voteSsgDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add Media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMedia(file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMedia(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new Admin
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdmin(adminDto: AdminDto, options?: any): AxiosPromise<AdminDto> {
            return localVarFp.addAdmin(adminDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Candidate
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCandidate(candidateDto: CandidateDto, options?: any): AxiosPromise<CandidateDto> {
            return localVarFp.addCandidate(candidateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Election
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addElection(electionDto: ElectionDto, options?: any): AxiosPromise<ElectionDto> {
            return localVarFp.addElection(electionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Position
         * @param {PositionDto} positionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPosition(positionDto: PositionDto, options?: any): AxiosPromise<PositionDto> {
            return localVarFp.addPosition(positionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Representative
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRepresentative(representativeDto: RepresentativeDto, options?: any): AxiosPromise<RepresentativeDto> {
            return localVarFp.addRepresentative(representativeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new SSG Member
         * @param {SsgMemberDto} ssgMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSsg(ssgMemberDto: SsgMemberDto, options?: any): AxiosPromise<SsgMemberDto> {
            return localVarFp.addSsg(ssgMemberDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Student
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudent(studentDto: StudentDto, options?: any): AxiosPromise<StudentDto> {
            return localVarFp.addStudent(studentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Users
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsers(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.addUsers(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Representative Candidate
         * @param {VoteRepDto} voteRepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoteRep(voteRepDto: VoteRepDto, options?: any): AxiosPromise<VoteRepDto> {
            return localVarFp.addVoteRep(voteRepDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new SSG Candidate
         * @param {VoteSsgDto} voteSsgDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoteSsg(voteSsgDto: VoteSsgDto, options?: any): AxiosPromise<VoteSsgDto> {
            return localVarFp.addVoteSsg(voteSsgDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmin(adminId: number, options?: any): AxiosPromise<AdminDto> {
            return localVarFp.deleteAdmin(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCandidate(candidateId: number, options?: any): AxiosPromise<CandidateDto> {
            return localVarFp.deleteCandidate(candidateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteElection(electionId: number, options?: any): AxiosPromise<ElectionDto> {
            return localVarFp.deleteElection(electionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedia(id: number, options?: any): AxiosPromise<MediaDto> {
            return localVarFp.deleteMedia(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Position by id
         * @param {number} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePosition(positionId: number, options?: any): AxiosPromise<PositionDto> {
            return localVarFp.deletePosition(positionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Representative by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRepresentative(representativeId: number, options?: any): AxiosPromise<RepresentativeDto> {
            return localVarFp.deleteRepresentative(representativeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete SSG Member by id
         * @param {number} ssgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSsg(ssgId: number, options?: any): AxiosPromise<SsgMemberDto> {
            return localVarFp.deleteSsg(ssgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudent(studentId: number, options?: any): AxiosPromise<StudentDto> {
            return localVarFp.deleteStudent(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers(accountId: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.deleteUsers(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Representative Candidate by id
         * @param {number} voterRepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoteRep(voterRepId: number, options?: any): AxiosPromise<VoteRepDto> {
            return localVarFp.deleteVoteRep(voterRepId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete SSG Candidate by id
         * @param {number} voterSsgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoteSsg(voterSsgId: number, options?: any): AxiosPromise<VoteSsgDto> {
            return localVarFp.deleteVoteSsg(voterSsgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Admin by id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmin(adminId: number, options?: any): AxiosPromise<AdminDto> {
            return localVarFp.getAdmin(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmins(options?: any): AxiosPromise<AdminDto> {
            return localVarFp.getAdmins(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Candidate by id
         * @param {number} candidateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidate(candidateId: number, options?: any): AxiosPromise<CandidateDto> {
            return localVarFp.getCandidate(candidateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates(options?: any): AxiosPromise<CandidateDto> {
            return localVarFp.getCandidates(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Election by id
         * @param {number} electionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElection(electionId: number, options?: any): AxiosPromise<ElectionDto> {
            return localVarFp.getElection(electionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Election
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElections(options?: any): AxiosPromise<ElectionDto> {
            return localVarFp.getElections(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedia(id: number, options?: any): AxiosPromise<MediaDto> {
            return localVarFp.getMedia(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Positions by id
         * @param {number} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosition(positionId: number, options?: any): AxiosPromise<PositionDto> {
            return localVarFp.getPosition(positionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Positions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositions(options?: any): AxiosPromise<PositionDto> {
            return localVarFp.getPositions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Representatives by id
         * @param {number} representativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepresentative(representativeId: number, options?: any): AxiosPromise<RepresentativeDto> {
            return localVarFp.getRepresentative(representativeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Representatives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepresentatives(options?: any): AxiosPromise<RepresentativeDto> {
            return localVarFp.getRepresentatives(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get SSG Members by id
         * @param {number} ssgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsg(ssgId: number, options?: any): AxiosPromise<SsgMemberDto> {
            return localVarFp.getSsg(ssgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all SSG Members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsgs(options?: any): AxiosPromise<SsgMemberDto> {
            return localVarFp.getSsgs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Student by id
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudent(studentId: number, options?: any): AxiosPromise<StudentDto> {
            return localVarFp.getStudent(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudents(options?: any): AxiosPromise<Array<StudentDto>> {
            return localVarFp.getStudents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Users by id
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(accountId: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUsers(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserss(options?: any): AxiosPromise<Array<UserDto>> {
            return localVarFp.getUserss(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Representative Candidate by id
         * @param {number} voterRepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteRep(voterRepId: number, options?: any): AxiosPromise<VoteRepDto> {
            return localVarFp.getVoteRep(voterRepId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Representative Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteReps(options?: any): AxiosPromise<VoteRepDto> {
            return localVarFp.getVoteReps(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get SSG Candidate by id
         * @param {number} voterSsgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteSsg(voterSsgId: number, options?: any): AxiosPromise<VoteSsgDto> {
            return localVarFp.getVoteSsg(voterSsgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all SSG Candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteSsgs(options?: any): AxiosPromise<VoteSsgDto> {
            return localVarFp.getVoteSsgs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login User
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginUserDto: LoginUserDto, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.login(loginUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshDto: RefreshDto, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.refreshToken(refreshDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.register(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Admin by id
         * @param {number} adminId 
         * @param {AdminDto} adminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmin(adminId: number, adminDto: AdminDto, options?: any): AxiosPromise<AdminDto> {
            return localVarFp.updateAdmin(adminId, adminDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Candidate by id
         * @param {number} candidateId 
         * @param {CandidateDto} candidateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCandidate(candidateId: number, candidateDto: CandidateDto, options?: any): AxiosPromise<CandidateDto> {
            return localVarFp.updateCandidate(candidateId, candidateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Election by id
         * @param {number} electionId 
         * @param {ElectionDto} electionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateElection(electionId: number, electionDto: ElectionDto, options?: any): AxiosPromise<ElectionDto> {
            return localVarFp.updateElection(electionId, electionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Position by id
         * @param {number} positionId 
         * @param {PositionDto} positionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosition(positionId: number, positionDto: PositionDto, options?: any): AxiosPromise<PositionDto> {
            return localVarFp.updatePosition(positionId, positionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Representative by id
         * @param {number} representativeId 
         * @param {RepresentativeDto} representativeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRepresentative(representativeId: number, representativeDto: RepresentativeDto, options?: any): AxiosPromise<RepresentativeDto> {
            return localVarFp.updateRepresentative(representativeId, representativeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update SSG Member by id
         * @param {number} ssgId 
         * @param {SsgMemberDto} ssgMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSsg(ssgId: number, ssgMemberDto: SsgMemberDto, options?: any): AxiosPromise<SsgMemberDto> {
            return localVarFp.updateSsg(ssgId, ssgMemberDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Student by id
         * @param {number} studentId 
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudent(studentId: number, studentDto: StudentDto, options?: any): AxiosPromise<StudentDto> {
            return localVarFp.updateStudent(studentId, studentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Users by id
         * @param {number} accountId 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers(accountId: number, userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.updateUsers(accountId, userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Representative Candidate by id
         * @param {number} voterRepId 
         * @param {VoteRepDto} voteRepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoteRep(voterRepId: number, voteRepDto: VoteRepDto, options?: any): AxiosPromise<VoteRepDto> {
            return localVarFp.updateVoteRep(voterRepId, voteRepDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update SSG Candidate by id
         * @param {number} voterSsgId 
         * @param {VoteSsgDto} voteSsgDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoteSsg(voterSsgId: number, voteSsgDto: VoteSsgDto, options?: any): AxiosPromise<VoteSsgDto> {
            return localVarFp.updateVoteSsg(voterSsgId, voteSsgDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia(file?: any, options?: any): AxiosPromise<MediaDto> {
            return localVarFp.uploadMedia(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add new Admin
     * @param {AdminDto} adminDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addAdmin(adminDto: AdminDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addAdmin(adminDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Candidate
     * @param {CandidateDto} candidateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCandidate(candidateDto: CandidateDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addCandidate(candidateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Election
     * @param {ElectionDto} electionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addElection(electionDto: ElectionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addElection(electionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Position
     * @param {PositionDto} positionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addPosition(positionDto: PositionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addPosition(positionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Representative
     * @param {RepresentativeDto} representativeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addRepresentative(representativeDto: RepresentativeDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addRepresentative(representativeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new SSG Member
     * @param {SsgMemberDto} ssgMemberDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSsg(ssgMemberDto: SsgMemberDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSsg(ssgMemberDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Student
     * @param {StudentDto} studentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addStudent(studentDto: StudentDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addStudent(studentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Users
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUsers(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addUsers(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Representative Candidate
     * @param {VoteRepDto} voteRepDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addVoteRep(voteRepDto: VoteRepDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addVoteRep(voteRepDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new SSG Candidate
     * @param {VoteSsgDto} voteSsgDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addVoteSsg(voteSsgDto: VoteSsgDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addVoteSsg(voteSsgDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Admin by id
     * @param {number} adminId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAdmin(adminId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAdmin(adminId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Candidate by id
     * @param {number} candidateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCandidate(candidateId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCandidate(candidateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Election by id
     * @param {number} electionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteElection(electionId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteElection(electionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Media by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMedia(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMedia(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Position by id
     * @param {number} positionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePosition(positionId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePosition(positionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Representative by id
     * @param {number} representativeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRepresentative(representativeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRepresentative(representativeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete SSG Member by id
     * @param {number} ssgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSsg(ssgId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSsg(ssgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Student by id
     * @param {number} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStudent(studentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteStudent(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Users by id
     * @param {number} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUsers(accountId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUsers(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Representative Candidate by id
     * @param {number} voterRepId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteVoteRep(voterRepId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteVoteRep(voterRepId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete SSG Candidate by id
     * @param {number} voterSsgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteVoteSsg(voterSsgId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteVoteSsg(voterSsgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Admin by id
     * @param {number} adminId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdmin(adminId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdmin(adminId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Admins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdmins(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdmins(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Candidate by id
     * @param {number} candidateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCandidate(candidateId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCandidate(candidateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Candidate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCandidates(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCandidates(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Election by id
     * @param {number} electionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getElection(electionId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getElection(electionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Election
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getElections(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getElections(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Media by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMedia(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMedia(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Positions by id
     * @param {number} positionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPosition(positionId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPosition(positionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Positions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPositions(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPositions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get profile info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Representatives by id
     * @param {number} representativeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRepresentative(representativeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRepresentative(representativeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Representatives
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRepresentatives(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRepresentatives(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get SSG Members by id
     * @param {number} ssgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSsg(ssgId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSsg(ssgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all SSG Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSsgs(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSsgs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Student by id
     * @param {number} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStudent(studentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStudent(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Students
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStudents(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStudents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Users by id
     * @param {number} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(accountId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserss(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserss(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Representative Candidate by id
     * @param {number} voterRepId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVoteRep(voterRepId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVoteRep(voterRepId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Representative Candidate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVoteReps(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVoteReps(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get SSG Candidate by id
     * @param {number} voterSsgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVoteSsg(voterSsgId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVoteSsg(voterSsgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all SSG Candidate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVoteSsgs(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVoteSsgs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login User
     * @param {LoginUserDto} loginUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(loginUserDto: LoginUserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(loginUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary logout given user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Token
     * @param {RefreshDto} refreshDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refreshToken(refreshDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register User
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).register(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Admin by id
     * @param {number} adminId 
     * @param {AdminDto} adminDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAdmin(adminId: number, adminDto: AdminDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAdmin(adminId, adminDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Candidate by id
     * @param {number} candidateId 
     * @param {CandidateDto} candidateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCandidate(candidateId: number, candidateDto: CandidateDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCandidate(candidateId, candidateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Election by id
     * @param {number} electionId 
     * @param {ElectionDto} electionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateElection(electionId: number, electionDto: ElectionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateElection(electionId, electionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Position by id
     * @param {number} positionId 
     * @param {PositionDto} positionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePosition(positionId: number, positionDto: PositionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatePosition(positionId, positionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Representative by id
     * @param {number} representativeId 
     * @param {RepresentativeDto} representativeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRepresentative(representativeId: number, representativeDto: RepresentativeDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRepresentative(representativeId, representativeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update SSG Member by id
     * @param {number} ssgId 
     * @param {SsgMemberDto} ssgMemberDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSsg(ssgId: number, ssgMemberDto: SsgMemberDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSsg(ssgId, ssgMemberDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Student by id
     * @param {number} studentId 
     * @param {StudentDto} studentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateStudent(studentId: number, studentDto: StudentDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateStudent(studentId, studentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Users by id
     * @param {number} accountId 
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUsers(accountId: number, userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUsers(accountId, userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Representative Candidate by id
     * @param {number} voterRepId 
     * @param {VoteRepDto} voteRepDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateVoteRep(voterRepId: number, voteRepDto: VoteRepDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateVoteRep(voterRepId, voteRepDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update SSG Candidate by id
     * @param {number} voterSsgId 
     * @param {VoteSsgDto} voteSsgDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateVoteSsg(voterSsgId: number, voteSsgDto: VoteSsgDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateVoteSsg(voterSsgId, voteSsgDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Media
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadMedia(file?: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadMedia(file, options).then((request) => request(this.axios, this.basePath));
    }
}


